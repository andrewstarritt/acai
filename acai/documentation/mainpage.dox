/**
 */

/** \mainpage

<h2>Introduction</h2>

ACAI (ar-sigh-ee) is the Asynchronous Channel Access Interface, or the ACAI
Channel Access Interface if you prefer one of those recursive acronyms.

ACAI provides a thin-ish C++ EPICS Channel Access abstraction around the
basic Channel Access API.
It has been developed and tested on and for CentOS Linux. It has also been compiled,
but not tested on Windows 7 (mingw 32 bit). In version 1.2.7, memset replaced the
use og bzero in order to acheive this.

The main ACAI::Client class was developed from the struct sCA_Client type
and associated functions defined in pv_client.h/pv_client.c out of the kryten
application.

The Acai (Euterpe oleracea) berry is known to originate from Amazon rainforest
in Brazil.

<h2>License</h2>
ACAI is distributed under the GNU General Public License version 3.

The ACAI library is distributed in the hope that it will be useful, however it is
distributed  "AS IS" and WITHOUT ANY WARRANTY;  without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

<h2>Building/Linking ACAI</h2>
ACAI is provided as a standard EPICS module. In order to build it first locate and/or
build EPICS base. Next update the configure/RELEASE in the ACAI top directory to point
to your local epics base, e.g.
<pre>
EPICS_BASE=/epics/base
</pre>

Define the required host architecture, e.g.
<pre>
export EPICS_HOST_ARCH=linux-x86_64
</pre>

Lastly type make.

<h3>Dependancies</h3>
Apart from the EPICS shared libraries ca, Com and their dependancies, ACAI does
not reply on any non-standard libraries and/or templates, therefore there are no
troublesome or unexpected dependancies.

<h2>Using ACAI - Getting started</h2>

First, you will need to to include the following header files in your code.

<pre>
  \#include <acai_client_types.h>
  \#include <acai_client.h>
</pre>

Next, choose the thread that will interface to ACAI. This can be the main program
thread or any other thread. Within that thread call:
<pre>
  ACAI::Client::initialise ();
</pre>

This function's main purpose is to call <i>ca_context_create</i>, but also performs
other functions necessary to use the ACAI module.
ACAI does not expose the under-lying EPICS context, but does it provide a means
for other threads to attach to the ACAI context.

NOTE: This version of ACAI does not support multiple contexts is any way
what-so-ever. The initialise, attach, poll and finalise functions are static
functions that apply to <i>the one and only</i> ACAI context, as opposed to be
some kind of context object related methods.

Next, create a client object using your favorite process variable, and open the channel
<pre>
  ACAI::Client pv ("SR11MCM01:CURRENT_MONITOR");
  pv.openChannel ();
</pre> or <pre>
  ACAI::Client* pv = new ACAI::Client ("SR11MCM01:CURRENT_MONITOR");
  pv->openChannel ();   // remember to delete the pv object
</pre>

The openChannel function creates a channel and when the connection event occurs
(provided the connection is a successful) it then requests a channel read
(with all meta data) and also subscribes for time-based channel data updates.

Although ACAI uses EPICS callbacks internally, the callbacks are buffered and must
be processed by calling <i>ACAI::Client::poll</i> on a regular basis from the nominated thread.
When a buffered call back is processed, it updates the status/data/meta data of
the associated client object, and then triggers the ACAI updates and callbacks.
These all occur within the user's own thread.

This avoids the need for any mutex locking when dealing with ACAI objects and/or data.
It also means that if ACAI used another language other than C/C++, then the callbacks
are executed in the a thread created by that language environment. Some environements,
e.g. Ada 95 and Lazarus get very annoyed if Ada/Lazarus code is executed within the
context of an "alien" thread.

If data is passed on to any third party threads, then you will need to manage that.
See notes on multiple threads below.

The ACAI library has been designed to be intrinsically asynchronous, and all ACAI
applications must have some kind of event loop.
The event loop should must contain a small delay, which very much application
dependent, but typically 20mS to 50mS, e.g.:
<pre>
  <b>while</b> (true) {
     epicsThreadSleep (0.02);  // 20mSec
     ACAI::Client::poll ();    // ACAI call back functions invoked from here
     ...
     ... any specific application functionality
     ...
  }
</pre>

If the application provides some means to break out of event loop then the following
should be called to tidyup. This may be particularly important if leaving the event
loop does not occur immediately before the application terminates.
<pre>
   pv.closeChannel ();
   ACAI::Client::finalise ();
</pre>

The above is fine, but we need to gain access the PV's data for this program to do
anything useful. ACAI provides a number of ways to access to PV data.
These are, using scalar float value as example:

a) within the event loop, just read the data, if available, out of the client object;
<pre>
     <b>if</b> (pv.dataIsAvailable ()) {
        double x = pv.getFloating ();
        // do something with x
     }
 

</pre>
Note: pv.dataIsAvailable() returns true after channel has connected and the first
PV data has been received.

b) define and setup a connection and/or data update handler, e.g.
<pre>

  <b>static void</b> dataUpdateEventHandler (ACAI::Client* client, <b>const</b> bool firstupdate)
  {
     double x = client->getFloating ();
     // do something with latest client data
  }

  ...

  pv.setUpdateHandler (dataUpdateEventHandler);


</pre>

c) derive a class based on ACAI::Client and override the ACAI::Client::connectionUpdate
or ACAI::Client::dataUpdate or ACAI::Client::putCallbackNotifcation functions;

<pre>
  <b>class</b> MyClient : <b>public</b> ACAI::Client {

     // override base class function
     <b>void</b> dataUpdate (<b>const</b> bool firstUpdate) {
        double x = this->getFloating ();
        // do something with latest client data
     }
  }

  ...

  MyClient pv ("SR11MCM01:CURRENT_MONITOR");


</pre>

d) use an ACAI::Abstract_Client_User class - refer to class documentation.

Note: The various callbacks and polymorphic notification function calls are all
executed in the thread that calls the poll function irrespective of which thread(s)
created the ACAI::Client object and/or called the openChannel function.


<h3>Example</h3>
An example program that brings all the above together has been included in
acaiTestApp/acai_monitor.cpp
The is a simple command line program that use the ACAI framework.
This programs mimics the basic fuctionality of the EPICS base program camonitor.

Note:
This program is intended as example (and test) ACAI program rather than as
replacements for the afore mentioned camonitor program.

An ACAI program, like the above example, may be built using the EPICS make system.
However, as the ACAI header files only call up other ACAI header files and the
fallowing external header files:
<pre>
  \#include \<set\>
  \#include \<string\>
  \#include \<vector\>
</pre>
it is easy to build an ACAI application without any reference to EPICS header files
or the EPICS build system.


<h2>Multiple Threads</h2>
Using the ACAI::Client::attach function, it is possible for other threads to
attach to the ACAI context and then go on to create client objects and perform
operations on the object (such as openChannel which in turn calls ca_create_channel).
However there <b>is no internal mutex protection</b> of the state/data of a client
object, so it is the user's responsibility to ensure thread safe operations, particularly
with respect to ACAI::Client_Set objects and hence with respect to Abstract_Client_User
register/deregister functions.

Also, as stated, the internal updating of the client object and the callbacks/polymorphic
functions are executed by the thread that calls poll (), so any other thread
reading data from a client object may get inconsistant data; and even where the value
is atomic/self consistant (i.e. probably okay for short, integer, enum) the associated
timestamp and severity/status data could be from the previous/next update depending on
the order this data is accessed.

So in general, the creation and setup of client objects may be hand-balled off to
another thread, but the general opertation (polling and data extraction) is best
all done on one thread.

If multiple worker threads are needed to process large and/or many data sets, then
the user needs to extract a copy the data/meta data and pass this to the worker
thread for processing. Just notifying a worker thread that new data is available
for a particular object is <b>not</b> recommended.

*/
